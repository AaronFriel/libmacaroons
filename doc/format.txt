Current Format
--------------

Left empty so the proposed schemes can be discussed.  Shortcomings discussed
here: https://docs.google.com/document/d/1On_ILeQFVFXaN8ZSitZ9UarZCB-t_cRInSmJ-HVofCU/edit

Binary Format
-------------

Terminal tokens are in all-capitals, and all except for EOS and VERSION are
byte sequences in the following format:

	<field type: varuint64> <field length: varuint64=N> <field content: N bytes>

where varuint64 describes an unsigned integer in variable length
encoding, as described here.

	https://developers.google.com/protocol-buffers/docs/encoding#varints

To paraphrase that description, a varuint64 number consists of a sequence of bytes:

	x1, x2, ..., xn

where x1... x(n-1) are in the range 0x80 to 0xff and xn is in the range
0x0..0x7f. That is, all but the last byte has its most significant bit set.
The encoded number is (x1 & 0x7f) | (x2 & 0x7f) << 7 | ... xn << (n * 7).
That is, each byte encodes 7 bits of the resulting number,
least-significant bits first.

Field type values for the terminal tokens are as follows:

	LOCATION=1
	IDENTIFIER=2
	VID=4
	SIGNATURE=6

EOS is the single byte zero.
VERSION is a single byte with some value as yet to be decided.

The grammar is as follows, in YACC-like syntax:

macaroon: VERSION opt_location IDENTIFIER EOS caveats EOS SIGNATURE

caveats: caveat caveats
        | EOS

caveat: opt_location IDENTIFIER opt_vid EOS

opt_vid:
	| VID

opt_location:
         | LOCATION


JSON Format
-----------

The JSON format should be a mechanical translation of the above format with the
following specs:

macaroon: a JSON object with the fields:  "v" for version, "l" for location
          (optional), "i" for identifier, "c" for caveats, and "s" for
          signature.

version: a JSON integer

location: a string

identifier: a string

caveats: a JSON list of caveats

caveat: a JSON object with the fields:  "c" for CID (1st and 3rd), "v" for VID
        (3rd only), "l" for location (optional).

signature: a string

Strings may contain unicode data so long as the encoding is consistent across
the macaroon, and the ascii string r'\"' will unambiguously map to the
unicode characters '\' and '"' without requiring the parser to understand the
width of characters in the encoding.  Practically, ASCII and UTF-8 are safe;
other encodings should be used with care.

Strings should be unicode strings, and the verifier should be written to handle
this.  All fields described use ascii properties.

To handle binary data, such as the signature, one of the following two schemes
must be used (a compliant implementation must handle both):

Hex:  The field name should end in "H" and the value is hex-encoded.  For
      example,
                {"cH": "68656c6c6f20776f726c64"}
      is equivalent to
                {"c": "hello world"}

Base64:  The field name should end in "64" and the value is url-safe base64
         encoded.  For example,
                {"c64": "aGVsbG8gd29ybGQ="}
         is equivalent to
                {"c": "hello world"}
